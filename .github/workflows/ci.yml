name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        uv sync --dev
    
    - name: Run code quality checks
      run: |
        uv run ruff check .
        uv run ruff format --check .
        uv run mypy src/ --ignore-missing-imports
    
    - name: Run tests
      run: |
        uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run integration tests
      run: |
        uv run pytest tests/test_integration.py -v
    
    - name: Test CLI commands
      run: |
        uv run python -m src.cli train --config configs/experiment_default.yaml
        uv run python -m src.cli tune --config configs/experiment_default.yaml

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build training container
      run: |
        docker build -f Dockerfile.train -t ml-classifier-train:test .
    
    - name: Build serving container
      run: |
        docker build -f Dockerfile.app -t ml-classifier-serve:test .
    
    - name: Test training container
      run: |
        docker run --rm -v $(pwd)/data:/app/data -v $(pwd)/models:/app/models -v $(pwd)/configs:/app/configs ml-classifier-train:test python -m src.cli train --config configs/experiment_default.yaml
    
    - name: Test serving container
      run: |
        docker run -d --name test-api -p 8000:8000 -v $(pwd)/models:/app/models ml-classifier-serve:test
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-api
        docker rm test-api

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run security scan
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json